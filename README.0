zerodoc

Version 0.0.1. Last updated 2012-04-14

Zerodoc is a "plain text format" in the spirit of asciidoc, POD or
markdown, with an emphasis on simplicity and extensibility.
Very few formatting options are avaliable, both to keep the parser
simple and to make it easy to write new generators for the whole
format.

Included are a Python library can be used to translate an input
file or buffer into a tree that for wich generators can be easily
written, and a command line tool to call existing generators for
HTML, markdown, JSON and manpages (troff) formats.

Finally, the library can be used to define a set of rules for a
certain document. This can be used to make translator scripts for
git commit comments and translate them and upload to a Wiki, for
example (one of the origins of this program), or others. The rules
can be used as templates for editing those comments, etc.

Table of contents

- 1. The zerodoc format
 - 1.1 Header
  - 1.1.1 Title
  - 1.1.2 Abstract
 - 1.2 Source code
 - 1.3 Diagrams
- 2. Installing zerodoc
 - 2.1 Prerrequisites
 - 2.2 Installing the library and interpreter
  - 2.2.1 Using a git snapshot
  - 2.2.2 Using pypi
- 3. Using the command line converter
 - NAME
 - SYNOPSIS
 - 3.1 Calling conventions
 - 3.2 HTML output options
 - 3.3 JSON output options
 - 3.4 Markdown generator options
 - 3.5 Manpage generator options
- 4. Using the parser
 - 4.1 Example parsed tree
 - 4.2 Example generator: HTML
- 5. Defining input rules
 - 5.1 Rules file format
 - 5.2 Command line converter options
 - 5.3 Feeding the library
 - 5.4 Example: git hook
- 6. Zerodoc internals
 - 6.1 The PLY parser
 - 6.2 "Adjusted" sections
 - 6.3 Extending zerodoc

1. THE ZERODOC FORMAT

Zerodoc files are simple text files organized in paragraphs. A
paragraph is a group of text lines separated from other paragraphs
by blank lines. Lists and source code copied *verbatim* can be
defined. An unintrusive format for links is used, based on
a references system

1.1 Header

The header in a zerodoc document contains the title, an optional
abstract and a table of contents. The table of contents needs to
be updated by hand (this is different from other well known text
formats but allow zerodoc to have free-form titles (no --- nor
~~~ nor any other form of markup is needed):

 This is the title, that can spawn several
 lines

 This are one or several paragraphs of abstract

 1. Title 1
 2. Title 2

1.1.1 Title

The title can spawn several lines (a whole paragraph) that will be
joined together on output

The table of contents can be prefixed by a 'Table of conents' line
that will be recognized automatically as the TOC title. If that line
is not present, it will also be ommited on the transformed output.

1.1.2 Abstract

The abstract is a group of paragraphs that appear before the Table
of content.

1.2 Source code

Source code is text that will be included verbatim in the output. In
source code, newlines are meaningful and no limits on line-length are
imposed.

Source code is identified by one blanklines before the content of
the first line and one or more blanklines in the rest. No tabs can
be used, so either transform tabs-only source code before pasting
or use a tool like expand(1) to do it for you. Blank lines are also
included verbatim, up to the one delimiting the next 'regular'
paragraph (one that contains text and starts on the first column)

1.3 Diagrams

Diagrams can be either included directly in the output, just as
source code, or optionally converted to images (when this is
possible, for example in a manual page it does not make sense to
include images). Diagrams are converted using aafigure. Refer to
it's manual page [here:] for help

Diagrams are recognized by using TWO or more spaces before the
first line of them. Anything up to the next 'regular' paragraph
is considered part of the diagram.

Source-code paragraphs and diagrams can not be adjacent; they need
a 'regular' text paragraph (starting on the first column) between
them. This makes sense since no diagram can follow source code or
viceversa without at least an introduction of what the reader is
seeing.

2. INSTALLING ZERODOC

2.1 Prerrequisites

Zerodoc needs Python (2.6 or newer) the Python PLY 'lex and yacc'
utilities (2.5 or newer) and distutils for installation.

As an example, in a GNU/Linux Debian 6.0 'Squeeze' system, the
requirements can be installed using:

 # apt-get install python-ply

2.2 Installing the library and interpreter

2.2.1 Using a git snapshot

Clone the github repository using

 $ git clone git://github.com/odkq/zerodoc.git

Change to the zerodoc dir and call setup.py as root

 $ cd zerodoc/
 $ sudo ./setup.py install

2.2.2 Using pypi

3. Using the command line converter

NAME

zerodoc - converts a zerodoc text file to HTML/markdown

SYNOPSIS

3.1 Calling conventions

3.2 HTML output options

3.3 JSON output options

3.4 Markdown generator options

3.5 Manpage generator options

4. Using the parser

4.1 Example parsed tree

4.2 Example generator: HTML

5. Defining input rules

5.1 Rules file format

5.2 Command line converter options

5.3 Feeding the library

5.4 Example: git hook

6. Zerodoc internals

6.1 The PLY parser

6.2 "Adjusted" sections

6.3 Extending zerodoc

